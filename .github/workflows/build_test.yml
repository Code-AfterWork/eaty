# name: Build-Test CI

# on:
#   pull_request:
#     branches: [ "main" ]

# jobs:
#   build:

#     runs-on: ubuntu-latest
#     strategy:
#       max-parallel: 4
#       matrix:
#         python-version: [3.9]

#     steps:
#     - uses: actions/checkout@v3
#     - name: Set up Python ${{ matrix.python-version }}
#       uses: actions/setup-python@v3
#       with:
#         python-version: ${{ matrix.python-version }}
#     - name: Install Dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r ./backend/requirements.txt
#         pip install psycopg2
#     - name: Run Tests
#       run: |
#         python ./backend/manage.py test


name: Build-Test CI

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, pypy3]
        os: [
          ubuntu-20.04,
          ubuntu-18.04,
        ]

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.8

      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Configure sysctl limits
      run: |
        sudo swapoff -a
        sudo sysctl -w vm.swappiness=1
        sudo sysctl -w fs.file-max=262144
        sudo sysctl -w vm.max_map_count=262144

    # - uses: getong/elasticsearch-action@v1.2
    #   with:
    #     elasticsearch version: '2.3'
    #     host port: 9200
    #     container port: 9200
    #     host node port: 9300
    #     node port: 9300
    #     discovery type: 'single-node'
    - name: psycopg2 prerequisites
      run: sudo apt-get install python-dev libpq-dev
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ./backend/requirements.txt
        pip install pytest-django
    - name: Run migrations
      run: python manage.py migrate
    - name: Validate Project
      run: python manage.py check
    - name: Run Tests
      run: python manage.py test

